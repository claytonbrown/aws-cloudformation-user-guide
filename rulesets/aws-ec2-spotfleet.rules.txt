# AWS::EC2::SpotFleet SpotFleetRequestConfigData  == /.*/ <<  SpotFleetRequestConfigData is a required property for AWS::EC2::SpotFleet
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.AllocationStrategy  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ExcessCapacityTerminationPolicy  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.IamFleetRole  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.InstanceInterruptionBehavior  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.OnDemandAllocationStrategy  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.OnDemandMaxTotalPrice  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.SpotMaxTotalPrice  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.SpotPrice  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.Type  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ValidFrom  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ValidUntil  == /\S/ <<  AWS::EC2::SpotFleet is an expected but optional String property for SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ec2.spotfleet.spotfleetrequestconfigdata.IamFleetRole  == /.*/ <<  ec2.spotfleet.spotfleetrequestconfigdata.IamFleetRole is a required property for AWS::EC2::SpotFleet SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ec2.spotfleet.spotfleetrequestconfigdata.LaunchSpecifications  == /.*/ <<  ec2.spotfleet.spotfleetrequestconfigdata.LaunchSpecifications is a Conditional property for AWS::EC2::SpotFleet SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ec2.spotfleet.spotfleetrequestconfigdata.LaunchTemplateConfigs  == /.*/ <<  ec2.spotfleet.spotfleetrequestconfigdata.LaunchTemplateConfigs is a Conditional property for AWS::EC2::SpotFleet SpotFleetRequestConfigData
# AWS::EC2::SpotFleet SpotFleetRequestConfigData.ec2.spotfleet.spotfleetrequestconfigdata.TargetCapacity  == /.*/ <<  ec2.spotfleet.spotfleetrequestconfigdata.TargetCapacity is a required property for AWS::EC2::SpotFleet SpotFleetRequestConfigData
# SpotFleetRequestConfigData.AllocationStrategy == capacityOptimized << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.AllocationStrategy
# SpotFleetRequestConfigData.AllocationStrategy == capacityOptimizedPrioritized << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.AllocationStrategy
# SpotFleetRequestConfigData.AllocationStrategy == diversified << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.AllocationStrategy
# SpotFleetRequestConfigData.AllocationStrategy == lowestPrice << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.AllocationStrategy
# SpotFleetRequestConfigData.AllocationStrategy IN [capacityOptimized,capacityOptimizedPrioritized,diversified,lowestPrice] << Enforce Allowed Values
# SpotFleetRequestConfigData.ExcessCapacityTerminationPolicy == default << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.ExcessCapacityTerminationPolicy
# SpotFleetRequestConfigData.ExcessCapacityTerminationPolicy == noTermination << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.ExcessCapacityTerminationPolicy
# SpotFleetRequestConfigData.ExcessCapacityTerminationPolicy IN [default,noTermination] << Enforce Allowed Values
# SpotFleetRequestConfigData.InstanceInterruptionBehavior == hibernate << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.InstanceInterruptionBehavior
# SpotFleetRequestConfigData.InstanceInterruptionBehavior == stop << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.InstanceInterruptionBehavior
# SpotFleetRequestConfigData.InstanceInterruptionBehavior == terminate << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.InstanceInterruptionBehavior
# SpotFleetRequestConfigData.InstanceInterruptionBehavior IN [hibernate,stop,terminate] << Enforce Allowed Values
# SpotFleetRequestConfigData.OnDemandAllocationStrategy == lowestPrice << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.OnDemandAllocationStrategy
# SpotFleetRequestConfigData.OnDemandAllocationStrategy == prioritized << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.OnDemandAllocationStrategy
# SpotFleetRequestConfigData.OnDemandAllocationStrategy IN [lowestPrice,prioritized] << Enforce Allowed Values
# SpotFleetRequestConfigData.ReplaceUnhealthyInstances == False << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.ReplaceUnhealthyInstances
# SpotFleetRequestConfigData.ReplaceUnhealthyInstances == True << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.ReplaceUnhealthyInstances
# SpotFleetRequestConfigData.ReplaceUnhealthyInstances IN [True,False] << Enforce Allowed Values
# SpotFleetRequestConfigData.TerminateInstancesWithExpiration == False << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.TerminateInstancesWithExpiration
# SpotFleetRequestConfigData.TerminateInstancesWithExpiration == True << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.TerminateInstancesWithExpiration
# SpotFleetRequestConfigData.TerminateInstancesWithExpiration IN [True,False] << Enforce Allowed Values
# SpotFleetRequestConfigData.Type == instant << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.Type
# SpotFleetRequestConfigData.Type == maintain << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.Type
# SpotFleetRequestConfigData.Type == request << Enforce Expected Value for ec2.spotfleet.spotfleetrequestconfigdata.Type
# SpotFleetRequestConfigData.Type IN [instant,maintain,request] << Enforce Allowed Values