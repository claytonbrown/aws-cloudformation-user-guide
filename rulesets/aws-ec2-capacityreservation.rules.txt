# #AWS::EC2::CapacityReservation EbsOptimized  == True |OR| AWS::EC2::CapacityReservation EbsOptimized  == False << Enforce allowed values [True | False]
# #AWS::EC2::CapacityReservation EndDateType  == limited |OR| AWS::EC2::CapacityReservation EndDateType  == unlimited << Enforce allowed values [limited | unlimited]
# #AWS::EC2::CapacityReservation EphemeralStorage  == True |OR| AWS::EC2::CapacityReservation EphemeralStorage  == False << Enforce allowed values [True | False]
# #AWS::EC2::CapacityReservation InstanceMatchCriteria  == open |OR| AWS::EC2::CapacityReservation InstanceMatchCriteria  == targeted << Enforce allowed values [open | targeted]
# #AWS::EC2::CapacityReservation InstancePlatform  == Linux with SQL Server Enterprise |OR| AWS::EC2::CapacityReservation InstancePlatform  == Linux with SQL Server Standard |OR| AWS::EC2::CapacityReservation InstancePlatform  == Linux with SQL Server Web |OR| AWS::EC2::CapacityReservation InstancePlatform  == Linux/UNIX |OR| AWS::EC2::CapacityReservation InstancePlatform  == Red Hat Enterprise Linux |OR| AWS::EC2::CapacityReservation InstancePlatform  == SUSE Linux |OR| AWS::EC2::CapacityReservation InstancePlatform  == Windows |OR| AWS::EC2::CapacityReservation InstancePlatform  == Windows with SQL Server |OR| AWS::EC2::CapacityReservation InstancePlatform  == Windows with SQL Server Enterprise |OR| AWS::EC2::CapacityReservation InstancePlatform  == Windows with SQL Server Standard |OR| AWS::EC2::CapacityReservation InstancePlatform  == Windows with SQL Server Web << Enforce allowed values [Linux with SQL Server Enterprise | Linux with SQL Server Standard | Linux with SQL Server Web | Linux/UNIX | Red Hat Enterprise Linux | SUSE Linux | Windows | Windows with SQL Server | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web]
# #AWS::EC2::CapacityReservation Tenancy  == dedicated |OR| AWS::EC2::CapacityReservation Tenancy  == default << Enforce allowed values [dedicated | default]
# AWS::EC2::CapacityReservation AvailabilityZone  == /.*/ <<  AvailabilityZone is a required property for AWS::EC2::CapacityReservation
# AWS::EC2::CapacityReservation EbsOptimized  == /False/ <<  False is an expected value for AWS::EC2::CapacityReservation EbsOptimized
# AWS::EC2::CapacityReservation EbsOptimized  == /True/ <<  True is an expected value for AWS::EC2::CapacityReservation EbsOptimized
# AWS::EC2::CapacityReservation EbsOptimized  == False <<  False is expected  safe default value
# AWS::EC2::CapacityReservation EbsOptimized  == True <<  True is expected safe default value
# AWS::EC2::CapacityReservation EbsOptimized IN [True,False] << Enforcing Allowed Values only
# AWS::EC2::CapacityReservation EndDateType  == /limited/ <<  limited is an expected value for AWS::EC2::CapacityReservation EndDateType
# AWS::EC2::CapacityReservation EndDateType  == /unlimited/ <<  unlimited is an expected value for AWS::EC2::CapacityReservation EndDateType
# AWS::EC2::CapacityReservation EndDateType IN [limited,unlimited] << Enforcing Allowed Values only
# AWS::EC2::CapacityReservation EphemeralStorage  == /False/ <<  False is an expected value for AWS::EC2::CapacityReservation EphemeralStorage
# AWS::EC2::CapacityReservation EphemeralStorage  == /True/ <<  True is an expected value for AWS::EC2::CapacityReservation EphemeralStorage
# AWS::EC2::CapacityReservation EphemeralStorage  == False <<  False is expected  safe default value
# AWS::EC2::CapacityReservation EphemeralStorage  == True <<  True is expected safe default value
# AWS::EC2::CapacityReservation EphemeralStorage IN [True,False] << Enforcing Allowed Values only
# AWS::EC2::CapacityReservation InstanceCount  == /.*/ <<  InstanceCount is a required property for AWS::EC2::CapacityReservation
# AWS::EC2::CapacityReservation InstanceCount  == /[0-9].+/ <<  Integer is expected for AWS::EC2::CapacityReservation of InstanceCount 
# AWS::EC2::CapacityReservation InstanceMatchCriteria  == /open/ <<  open is an expected value for AWS::EC2::CapacityReservation InstanceMatchCriteria
# AWS::EC2::CapacityReservation InstanceMatchCriteria  == /targeted/ <<  targeted is an expected value for AWS::EC2::CapacityReservation InstanceMatchCriteria
# AWS::EC2::CapacityReservation InstanceMatchCriteria IN [open,targeted] << Enforcing Allowed Values only
# AWS::EC2::CapacityReservation InstancePlatform  == /.*/ <<  InstancePlatform is a required property for AWS::EC2::CapacityReservation
# AWS::EC2::CapacityReservation InstancePlatform  == /Linux with SQL Server Enterprise/ <<  Linux with SQL Server Enterprise is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Linux with SQL Server Standard/ <<  Linux with SQL Server Standard is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Linux with SQL Server Web/ <<  Linux with SQL Server Web is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Linux/UNIX/ <<  Linux/UNIX is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Red Hat Enterprise Linux/ <<  Red Hat Enterprise Linux is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /SUSE Linux/ <<  SUSE Linux is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Windows with SQL Server Enterprise/ <<  Windows with SQL Server Enterprise is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Windows with SQL Server Standard/ <<  Windows with SQL Server Standard is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Windows with SQL Server Web/ <<  Windows with SQL Server Web is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Windows with SQL Server/ <<  Windows with SQL Server is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform  == /Windows/ <<  Windows is an expected value for AWS::EC2::CapacityReservation InstancePlatform
# AWS::EC2::CapacityReservation InstancePlatform IN [Linux with SQL Server Enterprise,Linux with SQL Server Standard,Linux with SQL Server Web,Linux/UNIX,Red Hat Enterprise Linux,SUSE Linux,Windows,Windows with SQL Server,Windows with SQL Server Enterprise,Windows with SQL Server Standard,Windows with SQL Server Web] << Enforcing Allowed Values only
# AWS::EC2::CapacityReservation InstanceType  == /.*/ <<  InstanceType is a required property for AWS::EC2::CapacityReservation
# AWS::EC2::CapacityReservation TagSpecifications.ResourceType  == /\S/ <<  AWS::EC2::CapacityReservation is an expected but optional String property for TagSpecifications
# AWS::EC2::CapacityReservation Tenancy  == /dedicated/ <<  dedicated is an expected value for AWS::EC2::CapacityReservation Tenancy
# AWS::EC2::CapacityReservation Tenancy  == /default/ <<  default is an expected value for AWS::EC2::CapacityReservation Tenancy
# AWS::EC2::CapacityReservation Tenancy IN [dedicated,default] << Enforcing Allowed Values only